# -*- coding: utf-8 -*-
"""Untitled20.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xew2U3KCuueg8wlEVfcC_FAPwiLTZLye
"""

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import pathlib
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout, BatchNormalization,GlobalAveragePooling2D
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator

from google.colab import drive
drive.mount('/content/drive')

# Đây là các hằng số và biến được sử dụng để xác định tập dữ liệu hình ảnh và tham số mô hình cho một mạng thần kinh tích chập.
batch_size = 64
img_height = 150
img_width = 150
train_set = pathlib.Path('/content/drive/MyDrive/dataset/final_project_dataset/training_set')
val_set = pathlib.Path('/content/drive/MyDrive/dataset/final_project_dataset/test_set')

# train_datagen = ImageDataGenerator(
#     rescale=1./255,
#     rotation_range=15,
#     width_shift_range=0.1,
#     height_shift_range=0.1,
#     shear_range=0.1,
#     zoom_range=0.1,
#     horizontal_flip=True
# )
# train_ds=train_datagen.flow_from_directory(
#       train_set,
#       target_size=(150,150),
#       batch_size=64,
#       class_mode='sparse',
#       seed=123,
# )
# val_ds=train_datagen.flow_from_directory(
#       val_set,
#       target_size=(150,150),
#       batch_size=64,
#       class_mode='sparse',
#       seed=123,
  
# )
train_ds = tf.keras.utils.image_dataset_from_directory(
  train_set,
  validation_split=0,
  seed=123,
  image_size=(img_height, img_width),
  batch_size=batch_size)
val_ds = tf.keras.utils.image_dataset_from_directory(
  val_set,
  validation_split=0,
  seed=123,
  image_size=(img_height, img_width),
  batch_size=batch_size)

#xem hình ảnh của các lớp 
plt.figure(figsize=(10, 10))
for images, labels in train_ds.take(1):
    for i in range(9):
        ax = plt.subplot(3, 3, i + 1)
        plt.imshow(images[i].numpy().astype('uint8'))
        plt.title(class_names[labels[i]])
        plt.axis('off')

#Tạo model CNN

model = Sequential([
    Conv2D(32  , 3, padding='same', activation='relu', input_shape=(img_height, img_width, 3)),
    MaxPooling2D(),
 #   BatchNormalization(),
    Dropout(0.25),

    Conv2D(64, 3, padding='same', activation='relu', input_shape=(img_height, img_width, 3)),
    MaxPooling2D(),
    Dropout(0.25),

    Conv2D(64, 3, padding='same', activation='relu'),
    MaxPooling2D(),
    Dropout(0.25),

    Conv2D(64  , 3, padding='same', activation='relu'),
    MaxPooling2D(),
    Dropout(0.25),
    
    Conv2D(64  , 3, padding='same', activation='relu'),
    MaxPooling2D(),
    Dropout(0.25),


    GlobalAveragePooling2D(),
    Flatten(),
    Dense(64, activation='relu'),
    Dense(6, activation='softmax')
])
model.summary()

model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

# Train the model
history = model.fit(train_ds, epochs=20, validation_data=val_ds)

val_loss, val_acc = model.evaluate(val_ds)
print('Best validation accuracy: {:.2f}%'.format(val_acc * 100))

#Lưu lại model dưới dạng file h5 
model.save('/content/drive/MyDrive/dataset/final_project_dataset/finalmodel.h5')

plt.plot(history.history['accuracy'], label='Training accuracy')
plt.plot(history.history['val_accuracy'], label='Validation accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()

# Plot the training and validation loss over epochs
plt.plot(history.history['loss'], label='Training loss')
plt.plot(history.history['val_loss'], label='Validation loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()

"""Prediction"""

#dự đoán nhãn của hình ảnh đầu tiên trong bộ dữ liệu xác thực bằng cách sử dụng
# Đầu tiên, nó trích xuất hình ảnh đầu tiên và nhãn của nó từ lô tập dữ liệu xác thực, chuyển đổi 
# hình ảnh thành một mảng có nhiều mảng và hiển thị nó bằng matplotlib. Sau đó, nó sử dụng mô hình được đào tạo để
# dự đoán nhãn của hình ảnh và in cả nhãn thực và nhãn dự đoán.
import numpy as np
for images_batch, labels_batch in val_ds.take(1):
    
    first_image = images_batch[0].numpy().astype('uint8')
    first_label = labels_batch[0].numpy()
    
    print("first image to predict")
    plt.imshow(first_image)
    print("actual label:",class_names[first_label])
    
    batch_prediction = model.predict(images_batch)
    print("predicted label:",class_names[np.argmax(batch_prediction[0])])